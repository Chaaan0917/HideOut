
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "HideOut Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local GearsTab = Window:MakeTab({
	Name = "Gears",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = GearsTab:AddSection({
	Name = "Auto Merge Gears"
})

-- Default selections for both dropdowns
local selectedGear = "1" -- Default gear
local selectedAction = "Strength" -- Default action

-- Create the second dropdown menu for Gear Type
GearsTab:AddDropdown({
    Name = "Gear Type",
    Default = "Strength", -- Default action selected
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add more actions as needed
    Callback = function(Value)
        selectedAction = Value -- Update the selected action
        print("Selected Action: " .. selectedAction) -- Debug print
    end    
})

-- Create the first dropdown menu for Gear Value
GearsTab:AddDropdown({
    Name = "Gear Value",
    Default = "1", -- Default gear selected
    Options = {"1", "2", "3", "4", "5", "6"}, -- All 6 gears
    Callback = function(Value)
        selectedGear = Value -- Update the selected gear
        print("Selected Gear: " .. selectedGear) -- Debug print
    end    
})

-- Create a toggle to activate/deactivate the selected gear and action combination
GearsTab:AddToggle({
    Name = "Activate",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        loopRunning = Value -- Update the loop running state
        if loopRunning then
            print("Activation started.") -- Debug print
            spawn(function()
                while loopRunning do
                    -- Create the arguments based on the selected gear and action
                    local args = {
                        [1] = selectedAction .. "_" .. selectedGear -- Combine the action and gear (e.g., "fortune_1")
                    }

                    -- Fire the server event for the selected gear and action
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("MergeGears"):FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait(1) -- Adjust the wait time if necessary
                end
            end)
        else
            print("Activation stopped.") -- Debug print
        end
    end
})

local Section = GearsTab:AddSection({
	Name = "Auto Craft Gears"
})

-- Default selection for the dropdown
local selectedCraftingGear = "Strength" -- Default gear to craft

-- Create the dropdown menu for gear crafting selection
GearsTab:AddDropdown({
    Name = "Crafting Gear Selection",
    Default = "Strength", -- Default gear selected for crafting
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add other gear types as needed
    Callback = function(Value)
        selectedCraftingGear = Value -- Update the selected gear for crafting
        print("Selected Crafting Gear: " .. selectedCraftingGear) -- Debug print
    end    
})

-- Create a toggle to start/stop the crafting loop for the selected gear
GearsTab:AddToggle({
    Name = "Auto Craft Gear",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        craftingLoopRunning = Value -- Update the loop running state
        if craftingLoopRunning then
            print("Crafting loop started.") -- Debug print
            spawn(function()
                while craftingLoopRunning do
                    -- Create the arguments based on the selected gear for crafting
                    local args = {
                        [1] = selectedCraftingGear -- Use the selected gear (e.g., "Strength")
                    }

                    -- Fire the CraftGear event for the selected gear
                    game:GetService("ReplicatedStorage").Remotes.Events.CraftGear:FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait(1) -- Adjust the wait time if necessary
                end
            end)
        else
            print("Crafting loop stopped.") -- Debug print
        end
    end
})

