
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "HideOut Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local GearsTab = Window:MakeTab({
	Name = "Gears",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = GearsTab:AddSection({
	Name = "Auto Merge Gears"
})

-- Default selections for both dropdowns
local selectedGear = "1" -- Default gear
local selectedAction = "Strength" -- Default action

-- Create the second dropdown menu for Gear Type
GearsTab:AddDropdown({
    Name = "Gear Type",
    Default = "Strength", -- Default action selected
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add more actions as needed
    Callback = function(Value)
        selectedAction = Value -- Update the selected action
        print("Selected Action: " .. selectedAction) -- Debug print
    end    
})

-- Create the first dropdown menu for Gear Value
GearsTab:AddDropdown({
    Name = "Gear Value",
    Default = "1", -- Default gear selected
    Options = {"1", "2", "3", "4", "5", "6"}, -- All 6 gears
    Callback = function(Value)
        selectedGear = Value -- Update the selected gear
        print("Selected Gear: " .. selectedGear) -- Debug print
    end    
})

-- Create a toggle to activate/deactivate the selected gear and action combination
GearsTab:AddToggle({
    Name = "Activate",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        loopRunning = Value -- Update the loop running state
        if loopRunning then
            print("Activation started.") -- Debug print
            spawn(function()
                while loopRunning do
                    -- Create the arguments based on the selected gear and action
                    local args = {
                        [1] = selectedAction .. "_" .. selectedGear -- Combine the action and gear (e.g., "fortune_1")
                    }

                    -- Fire the server event for the selected gear and action
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("MergeGears"):FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Activation stopped.") -- Debug print
        end
    end
})

local Section = GearsTab:AddSection({
	Name = "Auto Craft Gears"
})

-- Default selection for the dropdown
local selectedCraftingGear = "Strength" -- Default gear to craft

-- Create the dropdown menu for gear crafting selection
GearsTab:AddDropdown({
    Name = "Crafting Gear Selection",
    Default = "Strength", -- Default gear selected for crafting
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add other gear types as needed
    Callback = function(Value)
        selectedCraftingGear = Value -- Update the selected gear for crafting
        print("Selected Crafting Gear: " .. selectedCraftingGear) -- Debug print
    end    
})

-- Create a toggle to start/stop the crafting loop for the selected gear
GearsTab:AddToggle({
    Name = "Auto Craft Gear",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        craftingLoopRunning = Value -- Update the loop running state
        if craftingLoopRunning then
            print("Crafting loop started.") -- Debug print
            spawn(function()
                while craftingLoopRunning do
                    -- Create the arguments based on the selected gear for crafting
                    local args = {
                        [1] = selectedCraftingGear -- Use the selected gear (e.g., "Strength")
                    }

                    -- Fire the CraftGear event for the selected gear
                    game:GetService("ReplicatedStorage").Remotes.Events.CraftGear:FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Crafting loop stopped.") -- Debug print
        end
    end
})

local EggsTab = Window:MakeTab({
	Name = "Eggs",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = EggsTab:AddSection({
	Name = "Auto Hatch Eggs"
})

-- Default selections for the dropdowns
local selectedEgg = "Plushie Egg" -- Default egg type
local selectedHatchCount = 1 -- Default hatch count (1, 3, or 8)
local selectedType = false -- Default: false (Normal)
local hatchLoopRunning = false -- State for the auto hatch toggle

-- Create the dropdown menu for egg selection
EggsTab:AddDropdown({
    Name = "Egg Selection",
    Default = "Plushie Egg", -- Default egg selected for hatching
    Options = {"Beginner Egg", "Farm Egg", "Ocean Egg", "Beach Egg","Winter Egg","Actic Egg","Lava Egg","Hell Egg","Slush Egg",
    "Chocolate Egg","Enchanted Egg","Angel Egg","Blocky Egg","Plushie Egg","Cactus Egg","Coconut Egg","Glow Egg","Crystal Egg",
    "Raider Egg","Thieves Egg","Steampunk Egg","Gearpunk Egg","20M Egg"}, -- Add more egg types as needed
    Callback = function(Value)
        selectedEgg = Value -- Update the selected egg
        print("Selected Egg: " .. selectedEgg) -- Debug print
    end    
})

-- Create the dropdown menu for hatch count selection
EggsTab:AddDropdown({
    Name = "Hatch Count Selection",
    Default = "1", -- Default hatch count
    Options = {"1", "3", "8"}, -- Options for hatch counts
    Callback = function(Value)
        selectedHatchCount = tonumber(Value) -- Update the selected hatch count
        print("Selected Hatch Count: " .. selectedHatchCount) -- Debug print
    end    
})

-- Create the dropdown menu for egg type selection (Normal/Golden)
EggsTab:AddDropdown({
    Name = "Egg Type Selection",
    Default = "Normal", -- Default egg type
    Options = {"Normal", "Golden"}, -- Options for egg types
    Callback = function(Value)
        selectedType = (Value == "Golden") -- Set to true for "Golden", false for "Normal"
        print("Selected Egg Type (boolean): " .. tostring(selectedType)) -- Debug print
    end    
})

-- Modify the existing auto-hatch loop to respect the toggle for animations
EggsTab:AddToggle({
    Name = "Auto Hatch",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        hatchLoopRunning = Value -- Update loop state
        if hatchLoopRunning then
            print("Auto hatching started.") -- Debug print
            spawn(function()
                while hatchLoopRunning do
                    -- Create the arguments based on the selected egg for hatching
                    local args = {
                        [1] = selectedEgg, -- Use the selected egg
                        [2] = selectedHatchCount, -- Use the selected hatch count
                        [3] = selectedType -- Use the selected boolean value (true for Golden, false for Normal)
                    }


                    -- Fire the PurchaseEgg event for the selected egg
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("PurchaseEgg"):FireServer(unpack(args))

                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Auto hatching stopped.") -- Debug print
        end
    end
})

local OtherTab = Window:MakeTab({
	Name = "Other",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = OtherTab:AddSection({
	Name = "avoid afk"
})

-- Variable to track whether anti-AFK is enabled
local antiAFKEnabled = false

-- Function to perform anti-AFK (jumping or moving periodically)
local function antiAFK()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    while antiAFKEnabled do
        -- Simulate a jump every 30 seconds (adjust time as necessary)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.Jump = true -- Make the character jump
            print("Anti-AFK: Character jumped to avoid being kicked.")
        end
        wait(5) -- Wait 30 seconds before the next jump (adjust as needed)
    end
end

-- Create a toggle to start/stop the anti-AFK mechanism
OtherTab:AddToggle({
    Name = "Anti-AFK",
    Default = false, -- Anti-AFK is off by default
    Callback = function(Value)
        antiAFKEnabled = Value -- Update anti-AFK state
        if antiAFKEnabled then
            print("Anti-AFK enabled.") -- Debug print
            spawn(antiAFK) -- Start the anti-AFK loop
        else
            print("Anti-AFK disabled.") -- Debug print
        end
    end
})

local collectTab = Window:MakeTab({
	Name = "Collect??",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = collectTab:AddSection({
	Name = "Section"
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local pickups = game.Workspace:WaitForChild("Pickups")

-- Variable to store the toggle state
local teleportEnabled = false

-- Function to teleport a part to the player
local function teleportPartToPlayer(part)
    if part:IsA("BasePart") and teleportEnabled then  -- Check if teleporting is enabled
        part.CFrame = character.HumanoidRootPart.CFrame  -- Teleport the part to player
    end
end

-- Function to teleport all existing parts
local function teleportExistingParts()
    for _, part in pairs(pickups:GetChildren()) do
        teleportPartToPlayer(part)
    end
end

-- Teleport existing parts in Pickups when the script starts
teleportExistingParts()

-- Connect to the ChildAdded event to teleport new parts
pickups.ChildAdded:Connect(function(newPart)
    wait(0.1) -- Optional delay to ensure the part is fully added before teleporting
    teleportPartToPlayer(newPart)
end)

-- Create the toggle
collectTab:AddToggle({
    Name = "Auto Collect Materials",
    Default = false,
    Callback = function(Value)
        teleportEnabled = Value  -- Update teleportEnabled based on the toggle
        print("Teleport enabled:", teleportEnabled)  -- Optional: print the toggle state
    end    
})

local chestName = "NormalChest" -- The chest model name
local isEnabled = false -- State of the toggle
local teleportThread -- Variable to hold the thread for toggling

-- Function to teleport to the chest and interact with the ProximityPrompt
local function teleportAndInteract()
    local teleportToPart = nil
    local proximityPrompt = nil

    -- Search through the XMarksTheSpot folder
    local xMarksTheSpot = game.Workspace:FindFirstChild("XMarksTheSpot")
    if xMarksTheSpot then
        -- Loop through the NormalChests inside XMarksTheSpot
        for _, chest in ipairs(xMarksTheSpot:GetChildren()) do
            if chest:IsA("Model") and chest.Name == chestName then
                -- Get the MainPart inside the chest
                local mainPart = chest:FindFirstChild("MainPart")
                if mainPart then
                    -- Find the Attachment and ProximityPrompt inside MainPart
                    local attachment = mainPart:FindFirstChild("Attachment")
                    if attachment then
                        proximityPrompt = attachment:FindFirstChildOfClass("ProximityPrompt")
                    end

                    -- Set the part to teleport to
                    teleportToPart = mainPart
                    break
                end
            end
        end
    end

    -- Teleport the player to the MainPart
    if teleportToPart then
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = teleportToPart.CFrame
            print("Teleported to part:", teleportToPart.Name)
            
            -- Trigger the ProximityPrompt if it exists
            if proximityPrompt then
                fireproximityprompt(proximityPrompt)
                print("Interacted with ProximityPrompt!")
            else
                warn("ProximityPrompt not found!")
            end
        end
    else
        warn("Could not find the MainPart or ProximityPrompt!")
    end
end

-- Function to handle the toggle
local function toggleTeleporting(Value)
    isEnabled = Value
    if isEnabled then
        print("Teleporting enabled.")
        -- Start the teleporting loop
        teleportThread = spawn(function()
            while isEnabled do
                teleportAndInteract()
                wait(1.5) -- Wait for 6 seconds before the next iteration
            end
        end)
    else
        print("Teleporting disabled.")
        -- Stop the teleporting loop by setting isEnabled to false
        if teleportThread then
            teleportThread:Disconnect() -- Ensure to disconnect the thread properly
        end
    end
end

-- Add the toggle to your GUI
collectTab:AddToggle({
    Name = "Farm Eggs",
    Default = false,
    Callback = toggleTeleporting
})

