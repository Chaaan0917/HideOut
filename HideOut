
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "HideOut Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local AutoTab = Window:MakeTab({
	Name = "Auto Farm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = AutoTab:AddSection({
	Name = "Auto Click"
})

local isAutoClicking = false -- Toggle state

-- Function to handle auto-clicking
local function autoClick()
    while isAutoClicking do
        wait(0.1) -- Adjust the delay as needed
        game:GetService("ReplicatedStorage").Remotes.Events.Click:Fire() -- Fire the click event
    end
end

-- Create the toggle in your tab
AutoTab:AddToggle({
    Name = "Auto Click",
    Default = false, -- Set initial state
    Callback = function(Value)
        isAutoClicking = Value -- Update toggle state
        if isAutoClicking then
            print("Auto-clicking is now ON.")
            autoClick() -- Start auto-clicking
        else
            print("Auto-clicking is now OFF.")
        end
    end    
})

local Section = AutoTab:AddSection({
	Name = "Auto Orbs"
})

local isCollecting = false -- Toggle state

-- Function to collect DropOrbs
local function collectDropOrbs()
    while isCollecting do
        wait(0.1) -- Adjust delay as necessary
        game:GetService("ReplicatedStorage").Remotes.Events.DropOrb:Fire()
    end
end

-- Create the toggle in your tab
AutoTab:AddToggle({
    Name = "Auto Collect DropOrbs",
    Default = false,
    Callback = function(Value)
        isCollecting = Value -- Update toggle state
        if isCollecting then
            print("Auto-collecting DropOrbs is now ON.")
            collectDropOrbs() -- Start collecting
        else
            print("Auto-collecting DropOrbs is now OFF.")
        end
    end    
})

local GearsTab = Window:MakeTab({
	Name = "Gears",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = GearsTab:AddSection({
	Name = "Auto Merge Gears"
})

-- Default selections for both dropdowns
local selectedGear = "1" -- Default gear
local selectedAction = "Strength" -- Default action

-- Create the second dropdown menu for Gear Type
GearsTab:AddDropdown({
    Name = "Gear Type",
    Default = "Strength", -- Default action selected
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add more actions as needed
    Callback = function(Value)
        selectedAction = Value -- Update the selected action
        print("Selected Action: " .. selectedAction) -- Debug print
    end    
})

-- Create the first dropdown menu for Gear Value
GearsTab:AddDropdown({
    Name = "Gear Value",
    Default = "1", -- Default gear selected
    Options = {"1", "2", "3", "4", "5", "6"}, -- All 6 gears
    Callback = function(Value)
        selectedGear = Value -- Update the selected gear
        print("Selected Gear: " .. selectedGear) -- Debug print
    end    
})

-- Create a toggle to activate/deactivate the selected gear and action combination
GearsTab:AddToggle({
    Name = "Activate",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        loopRunning = Value -- Update the loop running state
        if loopRunning then
            print("Activation started.") -- Debug print
            spawn(function()
                while loopRunning do
                    -- Create the arguments based on the selected gear and action
                    local args = {
                        [1] = selectedAction .. "_" .. selectedGear -- Combine the action and gear (e.g., "fortune_1")
                    }

                    -- Fire the server event for the selected gear and action
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("MergeGears"):FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Activation stopped.") -- Debug print
        end
    end
})

local Section = GearsTab:AddSection({
	Name = "Auto Craft Gears"
})

-- Default selection for the dropdown
local selectedCraftingGear = "Strength" -- Default gear to craft

-- Create the dropdown menu for gear crafting selection
GearsTab:AddDropdown({
    Name = "Crafting Gear Selection",
    Default = "Strength", -- Default gear selected for crafting
    Options = {"Strength","Wins","Speed","Clover","SuperTap","Treasure","Fortune"}, -- Add other gear types as needed
    Callback = function(Value)
        selectedCraftingGear = Value -- Update the selected gear for crafting
        print("Selected Crafting Gear: " .. selectedCraftingGear) -- Debug print
    end    
})

-- Create a toggle to start/stop the crafting loop for the selected gear
GearsTab:AddToggle({
    Name = "Auto Craft Gear",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        craftingLoopRunning = Value -- Update the loop running state
        if craftingLoopRunning then
            print("Crafting loop started.") -- Debug print
            spawn(function()
                while craftingLoopRunning do
                    -- Create the arguments based on the selected gear for crafting
                    local args = {
                        [1] = selectedCraftingGear -- Use the selected gear (e.g., "Strength")
                    }

                    -- Fire the CraftGear event for the selected gear
                    game:GetService("ReplicatedStorage").Remotes.Events.CraftGear:FireServer(unpack(args))
                    
                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Crafting loop stopped.") -- Debug print
        end
    end
})

local EggsTab = Window:MakeTab({
	Name = "Eggs",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = EggsTab:AddSection({
	Name = "Auto Hatch Eggs"
})

-- Default selections for the dropdowns
local selectedEgg = "Plushie Egg" -- Default egg type
local selectedHatchCount = 1 -- Default hatch count (1, 3, or 8)
local selectedType = false -- Default: false (Normal)
local hatchLoopRunning = false -- State for the auto hatch toggle
local disableAnimations = false -- State for the animation toggle

-- Function to disable egg hatch animations
local function disableEggHatchAnimations()
    local player = game:GetService("Players").LocalPlayer
    local animationEffects = player:FindFirstChild("PlayerScripts"):FindFirstChild("AnimationEffects")

    if animationEffects then
        local eggSpins = animationEffects:FindFirstChild("EggSpins")
        if eggSpins then
            -- Set transparency to make it invisible (for parts or GUI elements)
            for _, obj in ipairs(eggSpins:GetChildren()) do
                if obj:IsA("BasePart") then
                    obj.Transparency = 1 -- Make it invisible
                elseif obj:IsA("Animation") then
                    obj:Stop() -- Stop animations
                end
            end
            print("Egg hatch animations disabled.")
        else
            print("EggSpins not found.")
        end
    else
        print("AnimationEffects not found.")
    end
end

-- Create the dropdown menu for egg selection
EggsTab:AddDropdown({
    Name = "Egg Selection",
    Default = "Plushie Egg", -- Default egg selected for hatching
    Options = {"Beginner Egg", "Farm Egg", "Ocean Egg", "Beach Egg", "Winter Egg", "Arctic Egg", "Lava Egg", "Hell Egg", "Slush Egg",
               "Chocolate Egg", "Enchanted Egg", "Angel Egg", "Blocky Egg", "Plushie Egg", "Cactus Egg", "Coconut Egg", "Glow Egg", "Crystal Egg",
               "Raider Egg", "Thieves Egg", "Steampunk Egg", "Gearpunk Egg"}, -- Add more egg types as needed
    Callback = function(Value)
        selectedEgg = Value -- Update the selected egg
        print("Selected Egg: " .. selectedEgg) -- Debug print
    end    
})

-- Create the dropdown menu for hatch count selection
EggsTab:AddDropdown({
    Name = "Hatch Count Selection",
    Default = "1", -- Default hatch count
    Options = {"1", "3", "8"}, -- Options for hatch counts
    Callback = function(Value)
        selectedHatchCount = tonumber(Value) -- Update the selected hatch count
        print("Selected Hatch Count: " .. selectedHatchCount) -- Debug print
    end    
})

-- Create the dropdown menu for egg type selection (Normal/Golden)
EggsTab:AddDropdown({
    Name = "Egg Type Selection",
    Default = "Normal", -- Default egg type
    Options = {"Normal", "Golden"}, -- Options for egg types
    Callback = function(Value)
        selectedType = (Value == "Golden") -- Set to true for "Golden", false for "Normal"
        print("Selected Egg Type (boolean): " .. tostring(selectedType)) -- Debug print
    end    
})

-- Toggle for disabling visible hatch egg animations
EggsTab:AddToggle({
    Name = "Disable Visible Hatch Animations",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        disableAnimations = Value -- Update the animation toggle state
        if disableAnimations then
            disableEggHatchAnimations()
        else
            print("Egg hatch animations enabled (no re-enable function set).")
        end
    end
})

-- Modify the existing auto-hatch loop
EggsTab:AddToggle({
    Name = "Auto Hatch",
    Default = false, -- Toggle is off by default
    Callback = function(Value)
        hatchLoopRunning = Value -- Update loop state
        if hatchLoopRunning then
            print("Auto hatching started.") -- Debug print
            spawn(function()
                while hatchLoopRunning do
                    -- Create the arguments based on the selected egg for hatching
                    local args = {
                        [1] = selectedEgg, -- Use the selected egg
                        [2] = selectedHatchCount, -- Use the selected hatch count
                        [3] = selectedType -- Use the selected boolean value (true for Golden, false for Normal)
                    }
                    -- Fire the PurchaseEgg event for the selected egg
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Events"):WaitForChild("PurchaseEgg"):FireServer(unpack(args))

                    -- Add a delay to avoid overloading the server
                    wait() -- Adjust the wait time if necessary
                end
            end)
        else
            print("Auto hatching stopped.") -- Debug print
        end
    end
})
